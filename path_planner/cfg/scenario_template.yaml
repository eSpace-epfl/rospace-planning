scenario:

  # Name that identifies the scenario when its solution is imported
  name: 'Scenario Template'

  # Brief description of the check points and of the mission
  overview: "0. Reach the same orbital plane as target. \n
             1. Go on a co-elliptic orbit ~35km below the target.  \n
             2. Move to a relative position w.r.t the target of [-4, -10, 0] (km)."

  # Radius of the keep-out-sphere [km], that should not in any case be touched by a trajectory, except during the final,
  # straight approach through a so-called approach corridor.
  keep_out_zone: #####

  # Measures of the approach ellipsoid axis, which is sort of a low-level keep out zone, that will be entered only
  # when the control is took by the target spacecraft (if there is crew within).
  # [dr, dv, dh] [km]
  approach_ellipsoid: [#####, #####, #####]

  # Propagator type. At the moment, the following types are available:
  # - 2-body:     Propagator that solves the 2-body problem
  # - real-world: Propagator that takes in consideration all the disturbances
  prop_type: #####

  # Check points definitions
  checkpoints:
    # Check points are defined by an "S" followed by it's number
    #
    # Notes:
    #   -> The numerical ordering is important: the execution order is defined by that.
    #   -> The numbers needs to go from 0 to N, where N is the total number of check points.
    S0:
      # Check point id number
      id: 0
      # Check point state, can be either defined in KepOrbElem (keyword: kep) or by CartesianLVLH (keyword: lvlh)
      state:
        # Definition of state in terms of KepOrbElem
        kep:
          # Each element has to be specified singularly as a number.
          a: ##### (km)
          e: ##### (-)
          i: ##### (rad)
          O: ##### (rad)
          w: ##### (rad)
          v: ##### (rad)

    S1:
      id: 1
      state:
        kep:
          i: #####
          O: #####
          w: #####
          a: #####
          e: #####
          v: #####

    S2:
      id: 2
      state:
        # Definition of state in terms of CartesianLVLH
        lvlh:
          # The relative distance and the relative velocity are defined there
          R: [#####, #####, #####] (km)
          V: [#####, #####, #####] (km/s)
      # The error ellipsoid defines the allowed error on the check point (km). For example if we are drifting from one
      # position to another we may end up in a slightly different place. However, if we are still inside this error
      # ellipsoid, the position will be considered valid anyway.
      error_ellipsoid: [#####, #####, #####] (km)
