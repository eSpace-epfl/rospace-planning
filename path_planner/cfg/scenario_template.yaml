scenario:

  # Name that identifies the scenario when its solution is imported
  name: 'Scenario Template'

  # Brief description of the check points
  overview: "0. Reach the same orbital plane as target. \n
             1. Go on a co-elliptic orbit ~35km below the target.  \n
             2. Move to a relative position w.r.t the target of [-4, -10, 0] (km)."

  # Radius of the keep-out-sphere [km], that should not in any case be touched by a trajectory, except during the final,
  # straight approach through a so-called approach corridor.
  keep_out_zone: 0.2

  # Measures of the approach ellipsoid axis, which is sort of a low-level keep out zone, that will be entered only
  # when the control is took by the target spacecraft (if there is crew within).
  # [dr, dv, dh] [km]
  approach_ellipsoid: [0.3, 1.5, 0.3]

  # Check points definitions
  CheckPoints:

    # Check points are defined by an "S" followed by it's number
    #
    # Notes:
    #   -> The numerical ordering is important: the execution order is defined by that.
    #   -> The numbers needs to go from 0 to N, where N is the total number of check points.
    S0:
      # Check point id number
      id: 0
      # Check point state, can be either defined in KepOrbElem (keyword: kep) or by CartesianLVLH (keyword: lvlh)
      state:
        # Definition of state in terms of KepOrbElem
        kep:
          # Each element is defined singularly, and can be defined using as reference chaser, target or self
          # states, examples:
          #   -> target.abs_state: target initial absolute state in KepOrbElem
          #   -> chaser.abs_state: chaser initial absolute state in KepOrbElem
          #   -> self.abs_state:   checkpoint initial absolute state in KepOrbElem
          #   -> chaser.rel_state: chaser initial relative state in CartesianLVLH
          #
          # Notes:
          #   -> In the first checkpoint (S0) every element has to be defined singularly, otherwise they will
          #      be initialized at 0.0.
          #   -> In the next checkpoints if an element is not defined it will be assumed to be the same as the
          #      previous one.
          i: target.abs_state.i
          O: target.abs_state.O
          w: chaser.abs_state.w
          a: chaser.abs_state.a
          e: chaser.abs_state.e

    S1:
      id: 1
      state:
        kep:
          # Semi-major axis is the same as the INITIAL target semi-major axis minus 35.0 km
          a: target.abs_state.a - 35.0
          # Eccentricity is calculated such that the orbit will be coelliptic to the INITIAL target orbit, i.e:
          # (a_t*e_t = a*e)
          e: target.abs_state.a * target.abs_state.e / self.abs_state.a

    S2:
      id: 2
      state:
        # Definition of state in terms of CartesianLVLH
        lvlh:
          # The relative distance and the relative velocity are defined there, if one is not defined it is initialized
          # as: [0.0, 0.0, 0.0]
          R: [-4.0, -10.0, 0]
      # The error ellipsoid defines the allowed error on the check point (km). For example if we are drifting from one
      # position to another we may end up in a slightly different place. However, if we are still inside this error
      # ellipsoid, the position will be considered valid anyway.
      error_ellipsoid: [1.5, 3.0, 1.5]
